TO DO list

1. write the API
    (DONE) - determine URL for each GET and POST
    (DONE - error codes) - don't forget to send back some message to frontend
                           to tell them the backend actually saved the new data
                           from a POST request.
    (DONE - error codes) - Make system that will deal with cases such as
                         - the POST request did not give valid data
                         - the POST request is missing data
                         - the GET request could not find what frontend wanted
                         - etc.

2. Make methods that will give the right JSON to frontend
    (DONE - changed to getting them by GET & POST as joining the JSONs
    caused serialization problems. the is_valid() kept returning False
    and I don't know how to fix it.) - join advertisement with all it's
    accommodation reviews, events.

3. (DONE) Make methods that will write the given JSON to database

4. [Backend] write methods for searches for the search module

5. (DONE) - get events for an ad - [Backend] booking module: give frontend the
    dates and time for each event

6. (DONE) - the model method "check_overlap" should take care of this but probably
    need to write a method to tell frontend part from a 401 message. -
    [Backend] booking request module: check the advertisement's events

7. (DONE) - [Backend] allow user to decline, accept, cancel booking requests

8. [Backend] email communication between users


(DONE) - when deleting an ad, need to delete it's reviews and events
(DONE) - update the list that tells us what that instance owns
    , when deleting, creating
(DONE) - when adding a id to a list we need to have a comma after the id
(DONE) - check if the get views can return multiple querysets
(DONE) - validity check on events
(DONE) - add image list field to advertisement model

1. user profile needs a list_of_rentals (event_id) —> the places you are renting, have rented
2. user profile need a list of posted_reviews (rev_id) —> the reviews that you wrote for a rented place
(DONE) need functions to update the list_of_rentals and posted_reviews
(DONE) change the separators for list of posted reviews and rentals to ;

(DONE) - the search distance, solution: use Haversine formula (refer to python file for more details)
(DONE) - fixed date formatting for booking accommodation

(DONE) - when making booking, I need the email of the user booking the property,
            something like this.auth0.username
(DONE) - update the TO DO tags for this [views related to this won't work till fixed]

(DONE) - /get/2018-10-10/2018-10-18/null/2/50/100.50/3/ --> not giving location,
            ==> no location search, no decimal search
(DONE) - {backend} need to work out how to pattern match the SEARCH URL given by frontend

(DONE) - when creating an ad post the image is not given to backend
(DONE) - take images from create ad and make PropertyImages instance
(DONE) - update email to new get system
(DONE) - check data before changing db
(DONE) - change all user email to lower case in importData
(DONE) - join JSON, whenever an ad is asked for, give frontend all info related to it.
(DONE) - update the URLs to new GET system, when getting you need to pass the email and/or id's of ads, etc.
(DONE) - creating an ad need to give backend a base_price, also need that in the form

TODO
- {frontend} when creating a review, I need the email of the reviewer, current person logged in

- {frontend} pass backend the lat & long for location search (it's times out in the backend)

- {both ends} make & check request module works (dumb feature) for update

- {gladys} integrate emailing

- {Gladys} test the clashing events, still don't think it works perfectly

- {gladys} write script that runs in the background that constantly checks if events have passed
  if passed, change the status of the booking

- {gladys} event when over need to change status, booked to finished to reviewed

- {backend} email when making a booking to booker and poster, have link back to "8080/manage" "8080/trips"
